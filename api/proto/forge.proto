syntax = "proto3";

package forge;

option go_package = "github.com/waste3d/forge/proto";

service Forge {
    // Запуск среды на фоне конфигурации
    rpc Up(UpRequest) returns (stream LogEntry);

    // Остановка среды и ее удаленние
    rpc Down(DownRequest) returns (DownResponse);

    // Получение логов
    rpc Logs(LogRequest) returns (stream LogEntry);

    // Получение статуса сервисов
    rpc Status(StatusRequest) returns (StatusResponse);

    // Выполняет команду в контейнере, обеспечивая двунаправленную связь
    rpc Exec(stream ExecPayload) returns (stream ExecOutput);

    // Сборка образов для сервисов без запуска контейнеров
    rpc Build(BuildRequest) returns (stream LogEntry);
}

message ExecSetup {
  string app_name = 1;
  string service_name = 2;
  repeated string command = 3;
  bool tty = 4; // True, если нужен интерактивный псевдо-терминал
}

message ExecPayload {
  oneof payload {
    ExecSetup setup = 1;
    bytes stdin = 2; // Фрагмент данных из стандартного ввода клиента
  }
}

message ExecOutput {
  bytes data = 1;
}


message ServiceStatus {
  string app_name = 1;
  string service_name = 2;
  string resource_type = 3;
  string resource_id = 4;
  string status = 5;
  string ports = 6;
  string created = 7;
}

message StatusRequest {
    string app_name = 1;
}

message StatusResponse {
    repeated ServiceStatus services = 1;
}

message LogRequest {
    string app_name = 1;
    string service_name = 2;
    bool follow = 3;
}

message UpRequest {
    string config_content = 1;

    string app_name = 2;
}

message DownRequest {
    string app_name = 1;
}

message DownResponse {
    string message = 1;
}

message LogEntry {
    string service_name = 1;
    int64 timestamp = 2;
    string message = 3;
}

message BuildRequest {
  string config_content = 1;
  repeated string services_name = 2; // если пусто, то все сервисы
}