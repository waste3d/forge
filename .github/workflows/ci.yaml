# Имя рабочего процесса, которое будет отображаться в GitHub Actions
name: Go Build and Lint

on:
  # Запускать при push в ветку master
  push:
    branches:
      - master
  # А также при создании или обновлении pull request в ветку master
  pull_request:
    branches:
      - master

jobs:
  # Название единственного задания в нашем процессе
  build:
    # Имя, которое будет отображаться для этого задания
    name: Build, Lint and Test
    # Указываем, что задание должно выполняться на свежей версии Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      # Скачивает ваш код в рабочую среду CI
      - name: Checkout Code
        uses: actions/checkout@v4

      # Шаг 2: Установка и настройка Go
      # Устанавливает нужную версию Go и включает кэширование модулей,
      # чтобы ускорить последующие запуски.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache: true

      # Шаг 3: Загрузка зависимостей
      # Явно скачивает все зависимости проекта. Это гарантирует, что
      # все необходимые пакеты будут доступны для следующих шагов.
      - name: Download Go modules
        run: go mod download

      # Шаг 4: Запуск линтера (необязательный)
      # Проверяет код на наличие проблем. Если линтер найдет ошибки,
      # он сообщит о них, но не будет "проваливать" всю сборку.
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        continue-on-error: true
        with:
          version: v1.56.2

      - name: Run tests
        run: go test -v ./...


      # Шаг 5: Запуск тестов (временно отключен)
      # Чтобы активировать этот шаг, просто удалите символы '#' в начале строк.
      # - name: Run tests
      #   run: go test -v ./...

      # Шаг 6: Сборка приложения
      # Компилирует ваш проект. Если на этом шаге возникнут ошибки,
      # весь рабочий процесс будет помечен как неудачный.
      - name: Build application
        run: go build -v ./...