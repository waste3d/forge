// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: forge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Forge_Up_FullMethodName     = "/forge.Forge/Up"
	Forge_Down_FullMethodName   = "/forge.Forge/Down"
	Forge_Logs_FullMethodName   = "/forge.Forge/Logs"
	Forge_Status_FullMethodName = "/forge.Forge/Status"
	Forge_Exec_FullMethodName   = "/forge.Forge/Exec"
	Forge_Build_FullMethodName  = "/forge.Forge/Build"
)

// ForgeClient is the client API for Forge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForgeClient interface {
	// Запуск среды на фоне конфигурации
	Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// Остановка среды и ее удаленние
	Down(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (*DownResponse, error)
	// Получение логов
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// Получение статуса сервисов
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Выполняет команду в контейнере, обеспечивая двунаправленную связь
	Exec(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecPayload, ExecOutput], error)
	// Сборка образов для сервисов без запуска контейнеров
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
}

type forgeClient struct {
	cc grpc.ClientConnInterface
}

func NewForgeClient(cc grpc.ClientConnInterface) ForgeClient {
	return &forgeClient{cc}
}

func (c *forgeClient) Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forge_ServiceDesc.Streams[0], Forge_Up_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_UpClient = grpc.ServerStreamingClient[LogEntry]

func (c *forgeClient) Down(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (*DownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownResponse)
	err := c.cc.Invoke(ctx, Forge_Down_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forgeClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forge_ServiceDesc.Streams[1], Forge_Logs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_LogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *forgeClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Forge_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forgeClient) Exec(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecPayload, ExecOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forge_ServiceDesc.Streams[2], Forge_Exec_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecPayload, ExecOutput]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_ExecClient = grpc.BidiStreamingClient[ExecPayload, ExecOutput]

func (c *forgeClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forge_ServiceDesc.Streams[3], Forge_Build_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BuildRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_BuildClient = grpc.ServerStreamingClient[LogEntry]

// ForgeServer is the server API for Forge service.
// All implementations must embed UnimplementedForgeServer
// for forward compatibility.
type ForgeServer interface {
	// Запуск среды на фоне конфигурации
	Up(*UpRequest, grpc.ServerStreamingServer[LogEntry]) error
	// Остановка среды и ее удаленние
	Down(context.Context, *DownRequest) (*DownResponse, error)
	// Получение логов
	Logs(*LogRequest, grpc.ServerStreamingServer[LogEntry]) error
	// Получение статуса сервисов
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Выполняет команду в контейнере, обеспечивая двунаправленную связь
	Exec(grpc.BidiStreamingServer[ExecPayload, ExecOutput]) error
	// Сборка образов для сервисов без запуска контейнеров
	Build(*BuildRequest, grpc.ServerStreamingServer[LogEntry]) error
	mustEmbedUnimplementedForgeServer()
}

// UnimplementedForgeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForgeServer struct{}

func (UnimplementedForgeServer) Up(*UpRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (UnimplementedForgeServer) Down(context.Context, *DownRequest) (*DownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Down not implemented")
}
func (UnimplementedForgeServer) Logs(*LogRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedForgeServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedForgeServer) Exec(grpc.BidiStreamingServer[ExecPayload, ExecOutput]) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedForgeServer) Build(*BuildRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedForgeServer) mustEmbedUnimplementedForgeServer() {}
func (UnimplementedForgeServer) testEmbeddedByValue()               {}

// UnsafeForgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForgeServer will
// result in compilation errors.
type UnsafeForgeServer interface {
	mustEmbedUnimplementedForgeServer()
}

func RegisterForgeServer(s grpc.ServiceRegistrar, srv ForgeServer) {
	// If the following call pancis, it indicates UnimplementedForgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Forge_ServiceDesc, srv)
}

func _Forge_Up_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForgeServer).Up(m, &grpc.GenericServerStream[UpRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_UpServer = grpc.ServerStreamingServer[LogEntry]

func _Forge_Down_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForgeServer).Down(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forge_Down_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForgeServer).Down(ctx, req.(*DownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forge_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForgeServer).Logs(m, &grpc.GenericServerStream[LogRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_LogsServer = grpc.ServerStreamingServer[LogEntry]

func _Forge_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForgeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forge_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForgeServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forge_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForgeServer).Exec(&grpc.GenericServerStream[ExecPayload, ExecOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_ExecServer = grpc.BidiStreamingServer[ExecPayload, ExecOutput]

func _Forge_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForgeServer).Build(m, &grpc.GenericServerStream[BuildRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forge_BuildServer = grpc.ServerStreamingServer[LogEntry]

// Forge_ServiceDesc is the grpc.ServiceDesc for Forge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forge.Forge",
	HandlerType: (*ForgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Down",
			Handler:    _Forge_Down_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Forge_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Up",
			Handler:       _Forge_Up_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _Forge_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Exec",
			Handler:       _Forge_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Build",
			Handler:       _Forge_Build_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "forge.proto",
}
