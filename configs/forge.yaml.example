# Версия схемы конфигурации. Обязательное поле.
# На данный момент поддерживается только версия 1.
version: 1

# Уникальное имя вашего приложения/окружения.
# Используется для создания префиксов в Docker (сети, контейнеры)
# и в командах CLI (например, `forge down <appName>`).
# Обязательное поле.
appName: "my-awesome-app"

# Список сервисов, составляющих ваше приложение (бэкенд, фронтенд, воркеры).
services:
  # Пример backend-сервиса на Go.
  - name: "backend-api"
    # Тип сервиса (для информации, пока не используется в логике).
    # Может быть "go", "node", "python", "rust" и т.д.
    type: "go"

    # Источник кода. Нужно выбрать ОДИН из двух вариантов: 'path' или 'repo'.

    # 1. Локальный путь (рекомендуется для локальной разработки).
    # Forge будет искать Dockerfile в этой директории.
    # Путь может быть относительным (относительно этого forge.yaml).
    path: "./backend"

    # 2. Git-репозиторий (для CI/CD или если вы не хотите хранить код локально).
    # Forge склонирует этот репозиторий перед сборкой.
    # repo: "https://github.com/your-org/backend-api.git"

    # Порт, который будет проброшен на вашу хост-машину.
    # Позволяет обращаться к сервису по `localhost:8080`.
    port: 8080

    # Список сервисов и баз данных, от которых зависит этот сервис.
    # (На будущее) Планируется для управления порядком запуска.
    dependsOn:
      - "main-db"
      - "cache"

  # Пример frontend-сервиса на Node.js, который будет скачан из репозитория.
  - name: "frontend-app"
    type: "node"
    # Для этого сервиса мы используем 'repo' вместо 'path'.
    repo: "https://github.com/your-org/frontend-app.git"
    port: 3000
    dependsOn:
      - "backend-api"

# Список баз данных или других stateful-сервисов (Redis, RabbitMQ и т.д.).
databases:
  # Пример основной базы данных PostgreSQL.
  - name: "main-db"
    # Тип и версия определяют, какой образ Docker будет скачан.
    # В данном случае, будет использован `postgres:15-alpine`.
    type: "postgres"
    version: "15-alpine"

    # Порт для подключения с хост-машины (например, через DataGrip или psql).
    # Выбран высокий порт 54321, чтобы не конфликтовать с локально установленным PostgreSQL.
    port: 54321
    # Внутренний порт контейнера. Для postgres это всегда 5432.
    internalPort: 5432

    # Переменные окружения, необходимые для инициализации контейнера.
    # См. документацию к Docker-образу для доступных переменных.
    env:
      - "POSTGRES_USER=appuser"
      # ВАЖНО: В реальных проектах используйте более надежный пароль
      # и управляйте им через систему секретов, а не храните в конфиге.
      - "POSTGRES_PASSWORD=supersecret"
      - "POSTGRES_DB=appdb"

  # Пример кэша на Redis.
  - name: "cache"
    type: "redis"
    version: "7-alpine"
    # Пробрасываем порт Redis для возможной отладки.
    port: 63790
    internalPort: 6379
    # Для базового запуска Redis не требует переменных окружения.
    env: []```